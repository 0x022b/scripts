#!/usr/bin/env bash
set -Eeuo pipefail
if [ -n "${DEBUG+x}" ]; then
    set -x
fi

trap 'echo "ERROR: Digest calculation failed" >&2' ERR

show_help() {
    printf 'Usage: %s [OPTION]... -- SOURCE\n' "$(basename "$0")"
    printf 'Compute message digests recursively for a directory tree.\n\n'
    printf '  -a, --algorithm <algo>   digest algorithm (default: sha256sum)\n'
    printf '  -o, --overwrite          overwrite existing digest file\n'
    printf '  -r, --relative           target path is relative to source\n'
    printf '  -t, --target <file>      output digest file\n'
    printf '  -h, --help               display this help and exit\n\n'
    printf 'Algorithm support depends on digest utilities installed in default path.\n'
}

set_algorithm() {
    if command -pv "$1" > '/dev/null'; then
        printf '%s' "$1"
    else
        printf 'ERROR: Unsupported digest algorithm: %s\n' "$1" >&2
    fi
}

source=''
algorithm='sha256sum'

while [ $# -gt 0 ]; do
    case "$1" in
        -a|--algorithm)
            algorithm="$(set_algorithm "$2")"
            shift
            ;;
        -h|--help)
            show_help
            exit
            ;;
        -o|--overwrite)
            overwrite=true
            ;;
        -r|--relative)
            relative=true
            ;;
        -t|--target)
            target="$2"
            shift
            ;;
        --)
            source="$(dirname "${2}/.")"
            shift
            break
            ;;
        *)
            printf 'ERROR: Unknown option: %s\n' "$1" >&2
            show_help
            exit 1
            ;;
    esac
    shift
done

target=".${algorithm}"

if [ $# -eq 0 ]; then
    show_help
    exit
fi

if [ -z "${algorithm}" ] || [ -z "${source}" ]; then
    show_help
    exit 1
fi

if ${relative:-false}; then
    target="${source}/${target}"
fi

if ! ${overwrite:-false} && [ -f "${target}" ]; then
    echo "WARN: checksum file already exists" >&2
    exit 2
fi

digests="$(basename "${target}")"
pattern="$(printf '%s' "${source}/" | perl -pe 's|([\[\]])|\\\1|g')"

find "${source}" -type f ! -name "${digests}" -print0 \
| sort -z \
| xargs -r0 "${algorithm}" \
| stdbuf -oL sed "s|${pattern}||" \
| tee "${target}"
