#!/usr/bin/env bash
set -Eeuo pipefail
if [ -n "${DEBUG+x}" ]; then
    set -x
fi

trap 'echo "ERROR: Digest calculation failed" >&2' ERR

print_help() {
    printf 'usage: %s [-a ALGORITHM] [-t TARGET] [-o] [-r] -- source\n' "$(basename "$0")"
    printf '\nCompute message digests recursively for a directory tree.\n'
    printf '\npositional arguments:\n'
    printf '  source                source directory\n'
    printf '\noptional arguments:\n'
    printf '  -h, --help            display this help and exit\n'
    printf '  -a ALGORITHM, --algorithm ALGORITHM\n'
    printf '                        digest algorithm (default: sha256sum)\n'
    printf '  -t TARGET, --target TARGET\n'
    printf '                        target digest file\n'
    printf '  -o, --overwrite       overwrite existing digest file\n'
    printf '  -r, --relative        target path is relative to source\n'
    printf '  --version             output version information and exit\n'
    printf '\nAlgorithm support depends on installed digest utilities.\n'
    # ls -1 /usr/bin/*sum | xargs -n1 basename
}

print_version() {
    printf '%s\n' '2020.08.16'
}

set_algorithm() {
    if command -pv "$1" > '/dev/null'; then
        printf '%s' "$1"
    else
        printf 'ERROR: Unsupported digest algorithm: %s\n' "$1" >&2
    fi
}

source=''
algorithm='sha256sum'

while [ $# -gt 0 ]; do
    case "$1" in
        -a|--algorithm)
            algorithm="$(set_algorithm "$2")"
            shift
            ;;
        -h|--help)
            print_help
            exit
            ;;
        -o|--overwrite)
            overwrite=true
            ;;
        -r|--relative)
            relative=true
            ;;
        -t|--target)
            target="$2"
            shift
            ;;
        --version)
            print_version
            exit
            ;;
        --)
            source="$(dirname "${2}/.")"
            shift
            break
            ;;
        *)
            printf 'ERROR: unknown option: %s\n' "$1" >&2
            print_help
            exit 1
            ;;
    esac
    shift
done

target=".${algorithm}"

if [ $# -eq 0 ]; then
    print_help
    exit
fi

if [ -z "${source}" ]; then
    print_help
    exit 1
fi

if ${relative:-false}; then
    target="${source}/${target}"
fi

if ! ${overwrite:-false} && [ -f "${target}" ]; then
    echo "WARN: checksum file already exists" >&2
    exit 2
fi

digests="$(basename "${target}")"
pattern="$(printf '%s' "${source}/" | perl -pe 's|([\[\]])|\\\1|g')"

find "${source}" -type f ! -name "${digests}" -print0 \
| sort -z \
| xargs -r0 "${algorithm}" \
| stdbuf -oL sed "s|${pattern}||" \
| tee "${target}"
